import { IAgenticaContext, IAgenticaPrompt } from "@agentica/core";
import { ILlmSchema } from "@samchon/openapi";

/**
 * Executor of the Agentic AI.
 *
 * `IAgenticaExecutor` represents an executor of the {@link Agentica},
 * composing its internal agents to accomplish the Agentic AI through
 * the LLM (Large Language Model) function calling.
 *
 * You can customize one of these internal agents by configuring
 * properties of the `IAgenticaExecutor` type, and assigning it to the
 * {@link IAgenticaConfig.executor} property. If you set the
 * {@link initialize} as `null` value, the {@link Agentica} will skip
 * the initialize process and directly go to the {@link select} process.
 *
 * By the way, when customizing the executor member, it would better to
 * reference the guide documents of `@agentica/core`, and internal
 * agents' implementation code. It's because if you take some mistake on
 * the executor logic, it can entirely break the {@link Agentica}'s
 * operation.
 *
 * @reference https://github.com/wrtnlabs/agentica?tab=readme-ov-file#principles
 * @reference https://github.com/wrtnlabs/agentica/blob/main/packages/agent/src/chatgpt/ChatGptAgent.ts
 * @author Samchon
 */
export interface IMicroAgenticaExecutor<Model extends ILlmSchema.Model> {
  /**
   * Caller agent.
   *
   * `Caller` agent calls insufficient functions.
   *
   * if the conversation context is not sufficient to call the functions,
   * the caller agent will ask the user to fill the missing arguments.
   *
   * or
   *
   * when not need to call functions, the caller agent will just generate plain LLM response.
   *
   * @param ctx Context of the agent
   * @returns List of prompts generated by the selector
   */
  call: (ctx: IAgenticaContext<Model>) => Promise<IAgenticaPrompt<Model>[]>;

  /**
   * Describer agent of the function calling result.
   *
   * `Describe` agent explains the results of the function callings
   * to the user as markdown content.
   *
   * @param ctx Context of the agent
   * @param executes List of function calling results
   * @returns List of prompts generated by the describer
   */
  describe: (ctx: IAgenticaContext<Model>) => Promise<IAgenticaPrompt<Model>[]>;
}
