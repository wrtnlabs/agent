import { IAgenticaController } from "@agentica/core/src/structures/IAgenticaController";
import { IAgenticaOperationSelection } from "@agentica/core/src/structures/IAgenticaOperationSelection";
import {
  IHttpLlmFunction,
  IHttpResponse,
  ILlmFunction,
  ILlmSchema,
} from "@samchon/openapi";

/**
 * Micro Agentica prompt.
 *
 * `IMicroAgenticaPrompt` is an union type of all possible prompts that can
 * be generated by the A.I. chatbot of the {@link MicroAgentica} class.
 *
 * In other words, `IMicroAgenticaPrompt` is a type of chat history that
 * is occurred during the conversation between the user and the A.I. chatbot
 * in the {@link MicroAgentica} class.
 *
 * If you want to continue the previous A.I. chatbot session, you can
 * accomplish it by assigning the {@link IAgenticaProps.histories}
 * property when creating a new {@link MicroAgentica} instance.
 *
 * @author Samchon
 */
export type IAgenticaPrompt<Model extends ILlmSchema.Model> =
  | IAgenticaPrompt.IText
  | IAgenticaPrompt.IExecute<Model>
  | IAgenticaPrompt.IDescribe<Model>;

export namespace IAgenticaPrompt {
  /**
   * Execute prompt.
   *
   * Execution prompt about the LLM function calling.
   */
  export type IExecute<Model extends ILlmSchema.Model> =
    | IExecute.IHttp<Model>
    | IExecute.IClass<Model>;
  export namespace IExecute {
    export type IHttp<Model extends ILlmSchema.Model> = IBase<
      "http",
      IAgenticaController.IHttp<Model>,
      IHttpLlmFunction<Model>,
      IHttpResponse
    >;
    export type IClass<Model extends ILlmSchema.Model> = IBase<
      "class",
      IAgenticaController.IClass<Model>,
      ILlmFunction<Model>,
      any
    >;
    interface IBase<Protocol, Controller, Function, Value> {
      /**
       * Discriminator type.
       */
      type: "execute";

      /**
       * Protocol discriminator.
       */
      protocol: Protocol;

      /**
       * Belonged controller of the target function.
       */
      controller: Controller;

      /**
       * Target function to call.
       */
      function: Function;

      /**
       * ID of the LLM tool call result.
       */
      id: string;

      /**
       * Identifier name of the function.
       *
       * If {@link Agentica} has multiple {@link IAgenticaController}s,
       * the `name` can be different from target function's name.
       */
      name: string;

      /**
       * Arguments of the LLM function calling.
       */
      arguments: object;

      /**
       * Return value.
       */
      value: Value;

      toJSON(): Omit<IBase<Protocol, string, string, Value>, "toJSON">;
    }
  }

  /**
   * Description prompt.
   *
   * Description prompt about the return value of the LLM function calling.
   */
  export interface IDescribe<Model extends ILlmSchema.Model>
    extends IBase<"describe"> {
    /**
     * Executions of the LLM function calling.
     *
     * This prompt describes the return value of them.
     */
    executions: IExecute<Model>;

    /**
     * Description text.
     */
    text: string;
  }

  /**
   * Text prompt.
   */
  export interface IText<
    Role extends "assistant" | "user" = "assistant" | "user",
  > extends IBase<"text"> {
    /**
     * Role of the orator.
     */
    role: Role;

    /**
     * The text content.
     */
    text: string;
  }

  interface IBase<Type extends string> {
    /**
     * Discriminator type.
     */
    type: Type;
  }
}
